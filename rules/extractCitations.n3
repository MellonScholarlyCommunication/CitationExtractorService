@prefix ex:   <http://example.org/> .
@prefix as:   <https://www.w3.org/ns/activitystreams#> .
@prefix sorg: <https://schema.org/>.
@prefix pol:  <https://www.example.org/ns/policy#> .
@prefix fno:  <https://w3id.org/function/ontology#> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix dcterms: <http://purl.org/dc/terms/> .

{
    # pol:origin defined the path to the original input file
    [ pol:origin ?origin ] .

    # We need an as:Offer...
    ?id a as:Offer .
    # ... of type ex:CitationExtraction
    ?id a ex:CitationExtraction .

    # ...which contains a (PDF) object
    ?id  as:object ?pdf .

    # ...check that it is pdf via the notification metadata
    # this is a temp solution due to a bug in the Biblio repository
    ?pdf as:mediaType "application/pdf" .

    # ...check that is is open access
    # this is a temp solution, pdf files that can't be retrieved could be skipped
    ?pdf dcterms:accessRights "open" .

    # Create an output directory for the parsed data
    ?origin log:uri ?origin_str .
    ( ?origin_str "^.*/" "in/" ) string:replace ?outTmp .
    ( ?outTmp "\\.\\w+$" ".ttl" ) string:replace ?outPath . 
    ?outUrl log:uri ?outPath .
}
=>
{
    # When the conditions above hold, the I want a policy executed
    # that extracts the citations from the url and places the 
    # result in ex:out
    ex:MyExtractCitations pol:policy [
        a fno:Execution ;
        fno:executes ex:extractCitations ;
        ex:url ?pdf
    ] .

    # Write the main store to a file
    ex:MyWriteMainStore pol:policy [
        a fno:Execution ;
        fno:executes ex:serializeAs ;
        ex:path ?outUrl 
    ]
}.