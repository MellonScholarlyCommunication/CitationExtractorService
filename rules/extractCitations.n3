@prefix ex:   <http://example.org/> .
@prefix as:   <https://www.w3.org/ns/activitystreams#> .
@prefix sorg: <https://schema.org/>.
@prefix pol:  <https://www.example.org/ns/policy#> .
@prefix fno:  <https://w3id.org/function/ontology#> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .

{
    # pol:mainSubject defines the top level identifier of the notification
    [ pol:mainSubject ?id ] .
    
    # pol:origin defined the path to the original input file
    [ pol:origin ?origin ] .

    ?id a as:Announce .
    ?id as:object ?object .
    ?object as:url ?url .
    ?url as:mediaType "application/pdf" .

    ?origin log:uri ?origin_str .
    ( ?origin_str "^.*/" "out/" ) string:replace ?outPath .
    ?outUrl log:uri ?outPath .
}
=>
{
    # When the conditions above hold, the I want a policy executed
    # that extracts the citations from the url and places the 
    # result in ex:out
    ex:MyExtractCitations pol:policy [
        a fno:Execution ;
        fno:executes ex:extractCitations ;
        ex:url ?url 
    ] .

    # Write the main store to a file
    ex:WriteMainStore pol:policy [
        a fno:Execution ;
        fno:executes ex:serializeAs ;
        ex:path ?outUrl 
    ]
}.